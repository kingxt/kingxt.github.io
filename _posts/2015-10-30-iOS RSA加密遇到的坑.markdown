<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>IOS RSA加密遇到的坑</title>
</head>
<body>
<div id="wmd-preview" class="wmd-preview"><div class="md-section-divider"></div><div class="md-section-divider"></div><h1 data-anchor-id="f1zq" id="ios-rsa加密遇到的坑">IOS RSA加密遇到的坑</h1><hr><p data-anchor-id="g966">最近在项目涉及到一点RSA算法问题，RSA是非对称秘钥加密，IOS在Security中支持大多数加密算法,AES, DES, RSA等。</p><p data-anchor-id="ky5m">我在用Security.framework时候遇到一个问题，用pem生成Public Key时候出错</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="z44f"><ol class="linenums"><li class="L0"><code class="language-objc"><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="pun">(</span><span class="typ">SecKeyRef</span><span class="pun">)</span><span class="pln">addPublicKey</span><span class="pun">:(</span><span class="typ">NSString</span><span class="pln"> </span><span class="pun">*)</span><span class="pln">key </span><span class="pun">{</span></code></li><li class="L1"><code class="language-objc"><span class="pln">    </span><span class="typ">NSRange</span><span class="pln"> spos </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key rangeOfString</span><span class="pun">:@</span><span class="str">"-----BEGIN PUBLIC KEY-----"</span><span class="pun">];</span></code></li><li class="L2"><code class="language-objc"><span class="pln">    </span><span class="typ">NSRange</span><span class="pln"> epos </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key rangeOfString</span><span class="pun">:@</span><span class="str">"-----END PUBLIC KEY-----"</span><span class="pun">];</span></code></li><li class="L3"><code class="language-objc"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">spos</span><span class="pun">.</span><span class="pln">location </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">NSNotFound</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> epos</span><span class="pun">.</span><span class="pln">location </span><span class="pun">!=</span><span class="pln"> </span><span class="typ">NSNotFound</span><span class="pun">){</span></code></li><li class="L4"><code class="language-objc"><span class="pln">        </span><span class="typ">NSUInteger</span><span class="pln"> s </span><span class="pun">=</span><span class="pln"> spos</span><span class="pun">.</span><span class="pln">location </span><span class="pun">+</span><span class="pln"> spos</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span></code></li><li class="L5"><code class="language-objc"><span class="pln">        </span><span class="typ">NSUInteger</span><span class="pln"> e </span><span class="pun">=</span><span class="pln"> epos</span><span class="pun">.</span><span class="pln">location</span><span class="pun">;</span></code></li><li class="L6"><code class="language-objc"><span class="pln">        </span><span class="typ">NSRange</span><span class="pln"> range </span><span class="pun">=</span><span class="pln"> </span><span class="typ">NSMakeRange</span><span class="pun">(</span><span class="pln">s</span><span class="pun">,</span><span class="pln"> e</span><span class="pun">-</span><span class="pln">s</span><span class="pun">);</span></code></li><li class="L7"><code class="language-objc"><span class="pln">        key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key substringWithRange</span><span class="pun">:</span><span class="pln">range</span><span class="pun">];</span></code></li><li class="L8"><code class="language-objc"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-objc"><span class="pln">    </span><span class="com">//注意，中间部分才是base64加密的public key，而且需要干掉换行空格</span></code></li><li class="L0"><code class="language-objc"><span class="pln">    key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key stringByReplacingOccurrencesOfString</span><span class="pun">:@</span><span class="str">"\r"</span><span class="pln"> withString</span><span class="pun">:@</span><span class="str">""</span><span class="pun">];</span></code></li><li class="L1"><code class="language-objc"><span class="pln">    key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key stringByReplacingOccurrencesOfString</span><span class="pun">:@</span><span class="str">"\n"</span><span class="pln"> withString</span><span class="pun">:@</span><span class="str">""</span><span class="pun">];</span></code></li><li class="L2"><code class="language-objc"><span class="pln">    key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key stringByReplacingOccurrencesOfString</span><span class="pun">:@</span><span class="str">"\t"</span><span class="pln"> withString</span><span class="pun">:@</span><span class="str">""</span><span class="pun">];</span></code></li><li class="L3"><code class="language-objc"><span class="pln">    key </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">key stringByReplacingOccurrencesOfString</span><span class="pun">:@</span><span class="str">" "</span><span class="pln">  withString</span><span class="pun">:@</span><span class="str">""</span><span class="pun">];</span></code></li><li class="L4"><code class="language-objc"><span class="pln">    </span><span class="com">//base64 解密key</span></code></li><li class="L5"><code class="language-objc"><span class="pln">    </span><span class="typ">NSData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">data </span><span class="pun">=</span><span class="pln"> base64_decode</span><span class="pun">(</span><span class="pln">key</span><span class="pun">);</span></code></li><li class="L6"><code class="language-objc"><span class="pln">    data </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">RSA stripPublicKeyHeader</span><span class="pun">:</span><span class="pln">data</span><span class="pun">];</span></code></li><li class="L7"><code class="language-objc"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(!</span><span class="pln">data</span><span class="pun">){</span></code></li><li class="L8"><code class="language-objc"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">;</span></code></li><li class="L9"><code class="language-objc"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-objc"><span class="pln">    </span><span class="com">//a tag to read/write keychain storage</span></code></li><li class="L1"><code class="language-objc"><span class="pln">    </span><span class="typ">NSString</span><span class="pln"> </span><span class="pun">*</span><span class="pln">tag </span><span class="pun">=</span><span class="pln"> </span><span class="pun">@</span><span class="str">"SL_PubKey"</span><span class="pun">;</span></code></li><li class="L2"><code class="language-objc"><span class="pln">    </span><span class="typ">NSData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">d_tag </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">NSData</span><span class="pln"> dataWithBytes</span><span class="pun">:[</span><span class="pln">tag UTF8String</span><span class="pun">]</span><span class="pln"> length</span><span class="pun">:[</span><span class="pln">tag length</span><span class="pun">]];</span></code></li><li class="L3"><code class="language-objc"></code></li><li class="L4"><code class="language-objc"><span class="pln">    </span><span class="com">// 先要删掉keychain中以前存的</span></code></li><li class="L5"><code class="language-objc"><span class="pln">    </span><span class="typ">NSMutableDictionary</span><span class="pln"> </span><span class="pun">*</span><span class="pln">publicKey </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[[</span><span class="typ">NSMutableDictionary</span><span class="pln"> alloc</span><span class="pun">]</span><span class="pln"> init</span><span class="pun">];</span></code></li><li class="L6"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln"> kSecClassKey forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecClass</span><span class="pun">];</span></code></li><li class="L7"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln"> kSecAttrKeyTypeRSA forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecAttrKeyType</span><span class="pun">];</span></code></li><li class="L8"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:</span><span class="pln">d_tag forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecAttrApplicationTag</span><span class="pun">];</span></code></li><li class="L9"><code class="language-objc"><span class="pln">    </span><span class="typ">SecItemDelete</span><span class="pun">((</span><span class="pln">__bridge </span><span class="typ">CFDictionaryRef</span><span class="pun">)</span><span class="pln">publicKey</span><span class="pun">);</span></code></li><li class="L0"><code class="language-objc"></code></li><li class="L1"><code class="language-objc"><span class="pln">    </span><span class="com">// 将public key加入keychain中</span></code></li><li class="L2"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:</span><span class="pln">data forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecValueData</span><span class="pun">];</span></code></li><li class="L3"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln"> kSecAttrKeyClassPublic forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span></code></li><li class="L4"><code class="language-objc"><span class="pln">     kSecAttrKeyClass</span><span class="pun">];</span></code></li><li class="L5"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:[</span><span class="typ">NSNumber</span><span class="pln"> numberWithBool</span><span class="pun">:</span><span class="pln">YES</span><span class="pun">]</span><span class="pln"> forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span></code></li><li class="L6"><code class="language-objc"><span class="pln">     kSecReturnPersistentRef</span><span class="pun">];</span></code></li><li class="L7"><code class="language-objc"></code></li><li class="L8"><code class="language-objc"><span class="pln">    </span><span class="typ">CFTypeRef</span><span class="pln"> persistKey </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">;</span></code></li><li class="L9"><code class="language-objc"><span class="pln">    </span><span class="typ">OSStatus</span><span class="pln"> status </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecItemAdd</span><span class="pun">((</span><span class="pln">__bridge </span><span class="typ">CFDictionaryRef</span><span class="pun">)</span><span class="pln">publicKey</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">persistKey</span><span class="pun">);</span></code></li><li class="L0"><code class="language-objc"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">persistKey </span><span class="pun">!=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">){</span></code></li><li class="L1"><code class="language-objc"><span class="pln">        </span><span class="typ">CFRelease</span><span class="pun">(</span><span class="pln">persistKey</span><span class="pun">);</span></code></li><li class="L2"><code class="language-objc"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-objc"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">((</span><span class="pln">status </span><span class="pun">!=</span><span class="pln"> noErr</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">status </span><span class="pun">!=</span><span class="pln"> errSecDuplicateItem</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-objc"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">;</span></code></li><li class="L5"><code class="language-objc"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-objc"></code></li><li class="L7"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey removeObjectForKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecValueData</span><span class="pun">];</span></code></li><li class="L8"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey removeObjectForKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecReturnPersistentRef</span><span class="pun">];</span></code></li><li class="L9"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:[</span><span class="typ">NSNumber</span><span class="pln"> numberWithBool</span><span class="pun">:</span><span class="pln">YES</span><span class="pun">]</span><span class="pln"> forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecReturnRef</span><span class="pun">];</span></code></li><li class="L0"><code class="language-objc"><span class="pln">    </span><span class="pun">[</span><span class="pln">publicKey setObject</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln"> kSecAttrKeyTypeRSA forKey</span><span class="pun">:(</span><span class="pln">__bridge id</span><span class="pun">)</span><span class="pln">kSecAttrKeyType</span><span class="pun">];</span></code></li><li class="L1"><code class="language-objc"></code></li><li class="L2"><code class="language-objc"><span class="pln">    </span><span class="com">// 取SecKeyRef</span></code></li><li class="L3"><code class="language-objc"><span class="pln">    </span><span class="typ">SecKeyRef</span><span class="pln"> keyRef </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">;</span></code></li><li class="L4"><code class="language-objc"><span class="pln">    status </span><span class="pun">=</span><span class="pln"> </span><span class="typ">SecItemCopyMatching</span><span class="pun">((</span><span class="pln">__bridge </span><span class="typ">CFDictionaryRef</span><span class="pun">)</span><span class="pln">publicKey</span><span class="pun">,</span><span class="pln"> </span><span class="pun">(</span><span class="typ">CFTypeRef</span><span class="pln"> </span><span class="pun">*)&amp;</span><span class="pln">keyRef</span><span class="pun">);</span></code></li><li class="L5"><code class="language-objc"><span class="pln">    </span><span class="kwd">if</span><span class="pun">(</span><span class="pln">status </span><span class="pun">!=</span><span class="pln"> noErr</span><span class="pun">){</span></code></li><li class="L6"><code class="language-objc"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span><span class="pun">;</span></code></li><li class="L7"><code class="language-objc"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-objc"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> keyRef</span><span class="pun">;</span></code></li><li class="L9"><code class="language-objc"><span class="pun">}</span></code></li></ol></pre><p data-anchor-id="k04a">上面这段代码是根据pem格式文件内容字符串（因为是base64过的）生成public key，我用iPhone6，iOS9.1连接Xcode Debug测试时候发现，某些情况调用SecItemAdd往keychain中添加秘钥时候status code 返回-34018，我google了一番，这是IOS的bug，具体请参考</p><blockquote data-anchor-id="7vst" class="white-blockquote">
  <p><a href="https://forums.developer.apple.com/thread/4743#14441" target="_blank">https://forums.developer.apple.com/thread/4743#14441</a></p>
</blockquote><p data-anchor-id="5ipq">这个bug只会在device连接xcode调试时候出现，断开调试用device直接跑的时候不会出现添加失败情况。还没有找到解决方案😭。</p><p data-anchor-id="28eg">为了解决这个问题，我打算放弃使用iOS自带的RSA，改用openssl的RSA实现。代码如下：</p><div class="md-section-divider"></div><pre class="prettyprint linenums prettyprinted" data-anchor-id="8p5s"><ol class="linenums"><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="typ">NSString</span><span class="pln"> </span><span class="pun">*</span><span class="pln">rsa_public_encrypt</span><span class="pun">(</span><span class="typ">NSData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">data</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">*</span><span class="pln">public_key_val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">    RSA </span><span class="pun">*</span><span class="pln">rsa_publicKey </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> rsa_public_len</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"><span class="pln">    BIO </span><span class="pun">*</span><span class="pln">bio </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">    bio </span><span class="pun">=</span><span class="pln"> BIO_new_mem_buf</span><span class="pun">(</span><span class="pln">public_key_val</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">bio </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">){</span></code></li><li class="L8"><code class="language-c"><span class="pln">        printf</span><span class="pun">(</span><span class="str">"Pub Key Read Failure\n"</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-c"><span class="pln">    rsa_publicKey </span><span class="pun">=</span><span class="pln"> PEM_read_bio_RSA_PUBKEY</span><span class="pun">(</span><span class="pln">bio</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rsa_publicKey </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-c"><span class="pln">        printf</span><span class="pun">(</span><span class="str">"RSA Generate failure\n"</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="pun">};</span></code></li><li class="L4"><code class="language-c"></code></li><li class="L5"><code class="language-c"><span class="pln">    rsa_public_len </span><span class="pun">=</span><span class="pln"> RSA_size</span><span class="pun">(</span><span class="pln">rsa_publicKey</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    printf</span><span class="pun">(</span><span class="str">"RSA public length: %d\n"</span><span class="pun">,</span><span class="pln"> rsa_public_len</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="com">// 11 bytes is overhead required for encryption</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> chunk_length </span><span class="pun">=</span><span class="pln"> rsa_public_len </span><span class="pun">-</span><span class="pln"> </span><span class="lit">11</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="com">// plain text length</span></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">long</span><span class="pln"> dataLength </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="com">// calculate the number of chunks</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> num_of_chunks </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">)(</span><span class="pln">dataLength </span><span class="pun">/</span><span class="pln"> chunk_length</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> total_cipher_length </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="com">// the output size is (total number of chunks) x (the key length)</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> encrypted_size </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">num_of_chunks </span><span class="pun">*</span><span class="pln"> rsa_public_len</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">cipher_data </span><span class="pun">=</span><span class="pln"> malloc</span><span class="pun">(</span><span class="pln">encrypted_size </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">*</span><span class="pln">plainBytes </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">bytes</span><span class="pun">;</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">err </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> dataLength</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">+=</span><span class="pln"> chunk_length</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-c"></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="com">// get the remaining character count from the plain text</span></code></li><li class="L6"><code class="language-c"><span class="pln">        </span><span class="typ">int</span><span class="pln"> remaining_char_count </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pun">)</span><span class="pln">dataLength </span><span class="pun">-</span><span class="pln"> i</span><span class="pun">;</span></code></li><li class="L7"><code class="language-c"></code></li><li class="L8"><code class="language-c"><span class="pln">        </span><span class="com">// this len is the number of characters to encrypt, thus take the minimum between the chunk count &amp; the remaining characters</span></code></li><li class="L9"><code class="language-c"><span class="pln">        </span><span class="com">// this must less than rsa_public_len - 11</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="typ">int</span><span class="pln"> len </span><span class="pun">=</span><span class="pln"> RSMIN</span><span class="pun">(</span><span class="pln">remaining_char_count</span><span class="pun">,</span><span class="pln"> chunk_length</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">plain_chunk </span><span class="pun">=</span><span class="pln"> malloc</span><span class="pun">(</span><span class="pln">len </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="com">// take out chunk of plain text</span></code></li><li class="L3"><code class="language-c"><span class="pln">        memcpy</span><span class="pun">(&amp;</span><span class="pln">plain_chunk</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">plainBytes</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> len</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">        </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">result_chunk </span><span class="pun">=</span><span class="pln"> malloc</span><span class="pun">(</span><span class="pln">rsa_public_len </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="typ">int</span><span class="pln"> result_length </span><span class="pun">=</span><span class="pln"> RSA_public_encrypt</span><span class="pun">(</span><span class="pln">len</span><span class="pun">,</span><span class="pln"> plain_chunk</span><span class="pun">,</span><span class="pln"> result_chunk</span><span class="pun">,</span><span class="pln"> rsa_publicKey</span><span class="pun">,</span><span class="pln"> RSA_PKCS1_PADDING</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">        free</span><span class="pun">(</span><span class="pln">plain_chunk</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">result_length </span><span class="pun">==</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">            ERR_load_CRYPTO_strings</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">            fprintf</span><span class="pun">(</span><span class="pln">stderr</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error %s\n"</span><span class="pun">,</span><span class="pln"> ERR_error_string</span><span class="pun">(</span><span class="pln">ERR_get_error</span><span class="pun">(),</span><span class="pln"> err</span><span class="pun">));</span></code></li><li class="L0"><code class="language-c"><span class="pln">            fprintf</span><span class="pun">(</span><span class="pln">stderr</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error %s\n"</span><span class="pun">,</span><span class="pln"> err</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pln">        memcpy</span><span class="pun">(&amp;</span><span class="pln">cipher_data</span><span class="pun">[</span><span class="pln">total_cipher_length</span><span class="pun">],</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">result_chunk</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> result_length</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"></code></li><li class="L4"><code class="language-c"><span class="pln">        total_cipher_length </span><span class="pun">+=</span><span class="pln"> result_length</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="pln">        free</span><span class="pun">(</span><span class="pln">result_chunk</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-c"><span class="pln">    RSA_free</span><span class="pun">(</span><span class="pln">rsa_publicKey</span><span class="pun">);</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="typ">size_t</span><span class="pln"> total_len </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"><span class="pln">    </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">encrypted </span><span class="pun">=</span><span class="pln"> rsa_base64_encode</span><span class="pun">(</span><span class="pln">cipher_data</span><span class="pun">,</span><span class="pln"> encrypted_size</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">total_len</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    free</span><span class="pun">(</span><span class="pln">cipher_data</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">[[</span><span class="typ">NSString</span><span class="pln"> alloc</span><span class="pun">]</span><span class="pln"> initWithBytes</span><span class="pun">:</span><span class="pln">encrypted length</span><span class="pun">:</span><span class="pln">total_len encoding</span><span class="pun">:</span><span class="pln">NSUTF8StringEncoding</span><span class="pun">];</span></code></li><li class="L4"><code class="language-c"><span class="pun">}</span></code></li><li class="L5"><code class="language-c"></code></li><li class="L6"><code class="language-c"><span class="typ">NSData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">rsa_public_decrypt</span><span class="pun">(</span><span class="typ">NSData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">data</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">*</span><span class="pln">public_key_val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">    RSA </span><span class="pun">*</span><span class="pln">rsa_publicKey </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="typ">int</span><span class="pln"> rsa_public_len</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    BIO </span><span class="pun">*</span><span class="pln">bio </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L0"><code class="language-c"></code></li><li class="L1"><code class="language-c"><span class="pln">    bio </span><span class="pun">=</span><span class="pln"> BIO_new_mem_buf</span><span class="pun">(</span><span class="pln">public_key_val</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">bio </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">){</span></code></li><li class="L3"><code class="language-c"><span class="pln">        printf</span><span class="pun">(</span><span class="str">"Public Key Read Failure\n"</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-c"><span class="pln">    rsa_publicKey </span><span class="pun">=</span><span class="pln"> PEM_read_bio_RSA_PUBKEY</span><span class="pun">(</span><span class="pln">bio</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">,</span><span class="pln"> NULL</span><span class="pun">);</span></code></li><li class="L6"><code class="language-c"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rsa_publicKey </span><span class="pun">==</span><span class="pln"> NULL</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-c"><span class="pln">        printf</span><span class="pun">(</span><span class="str">"RSA Generate failure\n"</span><span class="pun">);</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-c"></code></li><li class="L0"><code class="language-c"><span class="pln">    rsa_public_len </span><span class="pun">=</span><span class="pln"> RSA_size</span><span class="pun">(</span><span class="pln">rsa_publicKey</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">    printf</span><span class="pun">(</span><span class="str">"RSA public length: %d\n"</span><span class="pun">,</span><span class="pln"> rsa_public_len</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"></code></li><li class="L3"><code class="language-c"><span class="pln">    </span><span class="typ">size_t</span><span class="pln"> crypt_len </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">length</span><span class="pun">;</span></code></li><li class="L4"><code class="language-c"></code></li><li class="L5"><code class="language-c"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">crypt </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">bytes</span><span class="pun">;</span></code></li><li class="L6"><code class="language-c"></code></li><li class="L7"><code class="language-c"><span class="pln">    </span><span class="typ">NSMutableData</span><span class="pln"> </span><span class="pun">*</span><span class="pln">result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="typ">NSMutableData</span><span class="pln"> data</span><span class="pun">];</span></code></li><li class="L8"><code class="language-c"><span class="pln">    </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">err </span><span class="pun">=</span><span class="pln"> NULL</span><span class="pun">;</span></code></li><li class="L9"><code class="language-c"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">(</span><span class="typ">int</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> crypt_len</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">+=</span><span class="pln"> rsa_public_len</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-c"><span class="pln">        </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">crypt_chunk </span><span class="pun">=</span><span class="pln"> malloc</span><span class="pun">(</span><span class="pln">rsa_public_len</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">        memcpy</span><span class="pun">(&amp;</span><span class="pln">crypt_chunk</span><span class="pun">[</span><span class="lit">0</span><span class="pun">],</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">crypt</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> rsa_public_len</span><span class="pun">);</span></code></li><li class="L2"><code class="language-c"><span class="pln">        </span><span class="kwd">unsigned</span><span class="pln"> </span><span class="kwd">char</span><span class="pln"> </span><span class="pun">*</span><span class="pln">result_chunk </span><span class="pun">=</span><span class="pln"> malloc</span><span class="pun">(</span><span class="pln">crypt_len </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></code></li><li class="L3"><code class="language-c"><span class="pln">        </span><span class="typ">int</span><span class="pln"> result_length </span><span class="pun">=</span><span class="pln"> RSA_public_decrypt</span><span class="pun">(</span><span class="pln">rsa_public_len</span><span class="pun">,</span><span class="pln"> crypt_chunk</span><span class="pun">,</span><span class="pln"> result_chunk</span><span class="pun">,</span><span class="pln"> rsa_publicKey</span><span class="pun">,</span><span class="pln"> RSA_PKCS1_PADDING</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">        free</span><span class="pun">(</span><span class="pln">crypt_chunk</span><span class="pun">);</span></code></li><li class="L5"><code class="language-c"><span class="pln">        </span><span class="pun">[</span><span class="pln">result appendBytes</span><span class="pun">:</span><span class="pln">result_chunk length</span><span class="pun">:</span><span class="pln">result_length</span><span class="pun">];</span></code></li><li class="L6"><code class="language-c"><span class="pln">        free</span><span class="pun">(</span><span class="pln">result_chunk</span><span class="pun">);</span></code></li><li class="L7"><code class="language-c"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">result_length </span><span class="pun">==</span><span class="pln"> </span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-c"><span class="pln">            ERR_load_CRYPTO_strings</span><span class="pun">();</span></code></li><li class="L9"><code class="language-c"><span class="pln">            fprintf</span><span class="pun">(</span><span class="pln">stderr</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error %s\n"</span><span class="pun">,</span><span class="pln"> ERR_error_string</span><span class="pun">(</span><span class="pln">ERR_get_error</span><span class="pun">(),</span><span class="pln"> err</span><span class="pun">));</span></code></li><li class="L0"><code class="language-c"><span class="pln">            fprintf</span><span class="pun">(</span><span class="pln">stderr</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Error %s\n"</span><span class="pun">,</span><span class="pln"> err</span><span class="pun">);</span></code></li><li class="L1"><code class="language-c"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-c"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-c"><span class="pln">    RSA_free</span><span class="pun">(</span><span class="pln">rsa_publicKey</span><span class="pun">);</span></code></li><li class="L4"><code class="language-c"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> result</span><span class="pun">;</span></code></li><li class="L5"><code class="language-c"><span class="pun">}</span></code></li></ol></pre><p data-anchor-id="vrfl">这里有几个问题要注意：</p><blockquote data-anchor-id="mk35" class="white-blockquote">
  <p>1、公钥字符串每一行后面要加一个\n <br>
  2、加密后的数据长度 <br>
  3、解密后的数据长度</p>
</blockquote></div>
</body>
</html>